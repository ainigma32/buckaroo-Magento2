<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the MIT License
 * It is available through the world-wide-web at this URL:
 * https://tldrlegal.com/license/mit-license
 * If you are unable to obtain it through the world-wide-web, please send an email
 * to support@buckaroo.nl so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for your
 * needs please contact support@buckaroo.nl for more information.
 *
 * @copyright Copyright (c) Buckaroo B.V.
 * @license   https://tldrlegal.com/license/mit-license
 */
// @codingStandardsIgnoreFile
try {
    $paymentMethod = $block->getConfiguration('providerType');
    $issuers = $block->getIssuers();
} catch (\Exception $e) {
    $paymentMethod = 'unknown';
    $issuers = [];
}
?>
<div class="issuers_sort_wrapper">
    <input type="hidden" name="<?= $block->getConfiguration('name') ?>" id="sort_<?= $paymentMethod ?>"
           value="<?= $block->getSortedIssuerCodes() ?>">
    <div id="sort_<?= $paymentMethod ?>_list"></div>
</div>

<script>
    require([
        "jquery",
        "jquery/ui",
        "Magento_Theme/js/sortable"
    ], function ($) {
        'use strict';

        let listSelector = '#sort_<?= $paymentMethod ?>_list';
        $(listSelector).sortable({
            axis: 'y',
            tolerance: 'pointer',
            items: 'p',
            update: function(event, ui) {
                updateSortedList();
            }
        });

        let ccInherit = $('input[name="<?= $block->getConfiguration('ccInherit') ?>"]');
        let selector = 'select[name="<?= $block->getConfiguration('selector') ?>[]"]';
        let inputText = $('#sort_<?= $paymentMethod ?>').val();
        let selectorWrapper = '.<?= $paymentMethod ?>_sort_wrapper';

        var issuers = <?php echo json_encode($issuers); ?>;

        function createParagraphElement(code) {
            if (!issuers[code]) {
                return;
            }

            $(listSelector).append(
                '<p class="sort_issuer" data-code="' + code + '">' +
                '<img src="' + issuers[code]['img'] + '" style="width: 20px; height: 20px; margin-right: 5px;">' + 
                issuers[code]['name'] + '</p>'
            );
        }

        function initializeSortingList() {
            $(listSelector + ' p').remove();
            
            if (inputText !== '' && inputText !== '__EMPTY__') {
                let cardSortedArray = inputText.split(',');
                cardSortedArray.forEach(function(code) {
                    if (code && code.trim() !== '') {
                        createParagraphElement(code.trim());
                    }
                });
            } else {
                $(selector + ' option:selected').each(function () {
                    let code = $(this).val();
                    if (code && code !== '') {
                        createParagraphElement(code);
                    }
                });
            }
            
            updateSortedList();
        }

        function refreshSortingList() {
            // Get currently selected items from multiselect
            let selectedCodes = [];
            $(selector + ' option:selected').each(function () {
                let code = $(this).val();
                if (code && code !== '') {
                    selectedCodes.push(code);
                }
            });
            
            // Remove existing elements
            $(listSelector + ' p').remove();
            
            // Add elements for selected codes
            selectedCodes.forEach(function(code) {
                if (issuers[code]) {
                    createParagraphElement(code);
                }
            });
            
            updateSortedList();
        }

        function updateSortedList() {
            let codes = [];
            $(listSelector + ' p').each(function () {
                let code = $(this).data('code');
                if (code && code !== '') {
                    codes.push(code);
                }
            });
            let cardList = codes.join(',');
            
            // Use placeholder for empty values so Magento saves them properly
            if (cardList === '') {
                cardList = '__EMPTY__';
            }
            
            $('#sort_<?= $paymentMethod ?>').val(cardList);
        }

        function sortableOnOff(status) {
            let isDisabled = status == 'disable';
            $(listSelector).sortable(isDisabled  ? "disable": "enable");
            $(selectorWrapper).toggleClass('sortable_disable', isDisabled);
        }

        // Event handlers for multiselect changes
        $(selector).on('change input click', function () {
            setTimeout(refreshSortingList, 50);
        });

        // Handle keyboard events
        $(selector).on('keyup keydown', function(e) {
            if (e.which === 13 || e.which === 32) { // Enter or Space
                setTimeout(refreshSortingList, 50);
            }
        });

        // Initialize everything when DOM is ready
        $(document).ready(function () {
            initializeSortingList();
            
            if (ccInherit.is(":checked")) {
                sortableOnOff('disable');
            }
        });

        $('body').on('click', ccInherit, function () {
            if (ccInherit.is(":checked")) {
                sortableOnOff('disable');
            } else {
                sortableOnOff();
            }
        });
        
        // Interval check as fallback to ensure sync
        setInterval(function() {
            let currentSelected = [];
            $(selector + ' option:selected').each(function () {
                let code = $(this).val();
                if (code && code !== '') {
                    currentSelected.push(code);
                }
            });
            
            let currentSorting = [];
            $(listSelector + ' p').each(function () {
                let code = $(this).data('code');
                if (code && code !== '') {
                    currentSorting.push(code);
                }
            });
            
            // Check if they match
            if (currentSelected.length !== currentSorting.length || 
                !currentSelected.every(code => currentSorting.includes(code))) {
                refreshSortingList();
            }
        }, 2000);
    });
</script>